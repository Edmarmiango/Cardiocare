// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(PATIENT)
  crm           String?
  status        UserStatus @default(APPROVED)
  specialty     String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bi            String?
  appointments       Appointment[]
  doctorAppointments Appointment[] @relation("DoctorAppointments")
  schedules DoctorSchedule[]
  prescriptions      Prescription[]
  healthData         HealthData[]
  notifications      Notification[]
  prescriptionsGiven Prescription[] @relation("DoctorPrescriptions")
  timeSlots TimeSlot[]
  sharedDataAsPatient SharedHealthData[] @relation("PatientSharedData")
  sharedDataAsDoctor  SharedHealthData[] @relation("DoctorSharedData")
}

model Appointment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  doctorId  String
  doctor    User     @relation("DoctorAppointments", fields: [doctorId], references: [id])
  date      DateTime
  meetLink  String?
  status    AppointmentStatus @default(SCHEDULED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cancelReason String?
}

model Prescription {
  id           String   @id @default(cuid())
  medication   String
  dosage       String
  frequency    String
  instructions String
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  doctor       User     @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  doctorId     String
}

model HealthData {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  systolic   Int
  diastolic  Int
  heartRate  Int
  glucose    Int
  cholesterol Int
  date          DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SharedHealthData {
  id         String   @id @default(cuid())
  patientId  String
  patient    User     @relation("PatientSharedData", fields: [patientId], references: [id])
  doctorId   String
  doctor     User     @relation("DoctorSharedData", fields: [doctorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  type      NotificationType
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorSchedule {
  id        String   @id @default(cuid())
  doctorId  String
  doctor    User     @relation(fields: [doctorId], references: [id])
  dayOfWeek Int
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([doctorId, dayOfWeek])
}

model TimeSlot {
  id        String   @id @default(cuid())
  doctorId  String
  doctor    User     @relation(fields: [doctorId], references: [id])
  date      DateTime
  startTime String
  endTime   String
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([doctorId, date, startTime, endTime])
}


enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  APPOINTMENT_REMINDER
  MEDICATION_REMINDER
  HEALTH_DATA_ALERT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}


